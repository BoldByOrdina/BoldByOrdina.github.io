{"version":3,"sources":["webpack:///./src/components/blog-filters/blog-filters.js","webpack:///./src/pages/cases.js"],"names":["BlogFilters","tags","filterTags","React","useState","tagsMenuOpen","setTagsMenu","selectedTag","setSelectedTag","openTagsMenu","changeSelectedTag","tag","window","innerWidth","className","onClick","key","sort","a","b","map","data","location","siteMetadata","site","console","log","countOfInitialPost","configs","cases","edges","categories","useMemo","node","frontmatter","category","item","push","temp","Set","useRenderedCount","count","countRef","increaseCount","useCategory","selectCategory","selectedCases","setSelectedCases","useIntersectionObserver","useScrollEvent","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","dismissCondition","triggerCondition","length","current","title","HOME_TITLE","keywords","filteredCases","filter","indexOf","showAll","categoriesAsLink","posts","searchIndex","siteSearchIndex","index"],"mappings":"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","file":"component---src-pages-cases-js-1893b1b092d585ec1043.js","sourcesContent":["import React from 'react'\nimport './index.scss'\n\nexport const BlogFilters = ({ tags, filterTags }) => {\n  const [tagsMenuOpen, setTagsMenu] = React.useState(false)\n  const [selectedTag, setSelectedTag] = React.useState('All')\n  const openTagsMenu = () => setTagsMenu(!tagsMenuOpen)\n  const changeSelectedTag = (tag) => {\n    selectedTag === tag ? setSelectedTag('All') : setSelectedTag(tag)\n    window.innerWidth <= 768 && openTagsMenu()\n    filterTags(tag)\n  }\n  return (\n    <div className='blog-filters'>\n      <div className='blog-filters__toggle'\n           onClick={openTagsMenu}>\n        <span className='blog-filters__toggle--filter-name'>Filter:</span>\n        <span className={tagsMenuOpen ? 'blog-filters__toggle--open' : 'blog-filters__toggle--close'} />\n      </div>\n\n\n      <div className={`blog-filters__tags ${tagsMenuOpen ? 'blog-filters__tags--open' : 'blog-filters__tags--close'}`}>\n        <div className='blog-filters__tags--tag clickable'>\n         <span onClick={() => changeSelectedTag('All')}\n               key={'All'}\n               className={selectedTag === 'All' ? 'blog-filters__tags--highlight' : ''}>All</span>\n        </div>\n\n\n        {tags.sort((a, b) => a > b ? 1 : -1).map(tag =>\n          <div className='blog-filters__tags--tag clickable'>\n          <span key={tag}\n                onClick={() => changeSelectedTag(tag)}\n                className={selectedTag === tag ? 'blog-filters__tags--highlight' : ''}>{tag}</span>\n          </div>\n        )}\n\n      </div>\n    </div>\n  )\n}","import { graphql } from 'gatsby'\nimport _ from 'lodash'\nimport React, { useMemo } from 'react'\nimport { Head } from '../components/head'\nimport { HOME_TITLE } from '../constants'\nimport { useCategory } from '../hooks/useCategory'\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver'\nimport { useRenderedCount } from '../hooks/useRenderedCount'\nimport { useScrollEvent } from '../hooks/useScrollEvent'\nimport { Layout } from '../layout'\nimport * as Dom from '../utils/dom'\nimport * as EventManager from '../utils/event-manager'\nimport { BlogContent } from '../components/blog-content'\nimport { BlogFilters } from '../components/blog-filters/blog-filters'\nimport './cases.scss'\n\nconst BASE_LINE = 80\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos\n}\n\nexport default ({ data, location }) => {\n  const { siteMetadata } = data.site\n  console.log(data)\n\n  const { countOfInitialPost } = siteMetadata.configs\n  const cases = data.cases.edges\n  const categories = useMemo(\n    () => _.uniq(cases.map(({ node }) => node.frontmatter.category)),\n    []\n  )\n  let tags = []\n  cases.map(item => item.node.frontmatter.tags.map(tag => tags.push(tag)))\n\n  let temp = new Set(tags)\n  tags = [...temp]\n  const [count, countRef, increaseCount] = useRenderedCount()\n  const [category, selectCategory] = useCategory()\n  const [selectedCases, setSelectedCases] = React.useState([...cases])\n\n  const filterCategories = category => {\n    let filteredCases\n    if (category === 'All') {\n      filteredCases = [...cases]\n      setSelectedCases(filteredCases)\n      return\n    }\n\n    filteredCases = cases.filter(item => {\n      return item.node.frontmatter.category.indexOf(category) !== -1\n    })\n    setSelectedCases(filteredCases)\n  }\n\n  useIntersectionObserver()\n  useScrollEvent(() => {\n    const currentPos = window.scrollY + window.innerHeight\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE\n    const doesNeedMore = () =>\n      cases.length > countRef.current * countOfInitialPost\n\n    return EventManager.toFit(increaseCount, {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })()\n  })\n\n  return (\n    <Layout location={location} title={siteMetadata.title}>\n      <Head title={HOME_TITLE} keywords={siteMetadata.keywords} />\n      <div className=\"blog-page\">\n        <div className=\"blog-page__intro\">\n          <h1 className=\"blog-page__intro--title\">\n            BOLD <strong>cases</strong>\n          </h1>\n          <p>\n            We are passionate about our work and are proud to show you a selection of our design &amp; frontend development projects here.\n          </p>\n        </div>\n\n        <BlogFilters tags={categories} filterTags={filterCategories} />\n        <BlogContent\n          showAll={true}\n          categoriesAsLink\n          posts={selectedCases}\n          countOfInitialPost={countOfInitialPost}\n          count={count}\n          categories={categories}\n          selectCategory={selectCategory}\n          category={category}\n          searchIndex={data.siteSearchIndex.index}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    siteSearchIndex {\n      index\n    }\n    site {\n      siteMetadata {\n        title\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    cases: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { ne: null }, type: { eq: \"case\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            type\n            href\n            image {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            authors {\n              name\n              id\n            }\n            category\n            draft\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}