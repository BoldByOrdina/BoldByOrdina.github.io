{"version":3,"sources":["webpack:///./src/components/bio/index.jsx","webpack:///./src/templates/author.js"],"names":["Bio","author","className","fluid","profilepicture","childImageSharp","alt","name","split","substring","length","bio","data","site","siteMetadata","title","configs","authorYaml","postNodes","allMarkdownRemark","edges","location","countOfInitialPost","useRenderedCount","count","countRef","increaseCount","useScrollEvent","currentPos","window","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","dismissCondition","triggerCondition","current","showAll","posts","category","postsVisible"],"mappings":"mJAKaA,G,UAAM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEpB,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CAAOA,UAAU,qBACVC,MAAOF,EAAOG,eAAeC,gBAAgBF,MAC7CG,IAAKL,EAAOM,OAEnB,wBAAIL,UAAU,oBACZ,0BAAMA,UAAU,+BAA+BD,EAAOM,KAAKC,MAAM,KAAK,IADxE,IACoFP,EAAOM,KAAKE,UAAUR,EAAOM,KAAKC,MAAM,KAAK,GAAGE,UAGtI,2BAAIT,EAAOU,Q,kFCLF,sBASQ,IAAD,IARJC,KAQI,IAPFC,KACEC,aAAgBC,EAMhB,EANgBA,MAAOC,EAMvB,EANuBA,QAEzBC,EAIE,EAJFA,WAC4BC,EAG1B,EAHFC,kBAAqBC,MAEvBC,EACI,EADJA,SACI,IAKZC,EAAuBN,EAAvBM,mBALY,EAMqBC,cAAlCC,EANa,KAMNC,EANM,KAMIC,EANJ,KAkBpB,OAXAC,aAAe,WACb,IAAMC,EAAaC,OAAOC,QAAUD,OAAOE,YACrCC,EAAe,kBARvB,SAAqBJ,GACnB,OAAOK,MAA0BL,EAONM,CAAYN,GAnBzB,IAuBd,OAAOO,IAAmBT,EAAe,CACvCU,iBAAkB,kBAAOJ,KACzBK,iBAAkB,kBAAML,KAJxBd,EAAUR,OAASe,EAASa,QAAUhB,IAEjCa,MAMP,kBAAC,IAAD,CAAQd,SAAUA,EACVN,MAAOA,GACb,yBAAKb,UAAU,kBACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAKD,OAAQgB,KAEf,kBAAC,IAAD,CACEsB,SAAS,EACTC,MAAOtB,EACPI,mBAAoBA,EACpBE,MAAOA,EACPiB,SAAU,MACVC,cAAc,Q","file":"component---src-templates-author-js-bc87fce12bd91e497a8f.js","sourcesContent":["import React from 'react'\nimport Image from 'gatsby-image'\n\nimport './index.scss'\n\nexport const Bio = ({ author }) => {\n\n  return (\n    <div className='author-bio'>\n      <div className='author-bio__avatar-and-name'>\n        <Image className='author-bio__avatar'\n               fluid={author.profilepicture.childImageSharp.fluid}\n               alt={author.name}\n        />\n        <h1 className='author-bio__name'>\n          <span className='author-bio__name--firstname'>{author.name.split(' ')[0]}</span> {author.name.substring(author.name.split(' ')[0].length)}\n        </h1>\n      </div>\n      <p>{author.bio}</p>\n    </div>\n  )\n}\n\nexport default Bio\n","// templates/Author/index.jsx\nimport React from 'react'\nimport { Bio } from '../components/bio'\nimport { Layout } from '../layout'\nimport { graphql } from 'gatsby'\nimport { BlogContent } from '../components/blog-content'\nimport { useRenderedCount } from '../hooks/useRenderedCount'\nimport { useScrollEvent } from '../hooks/useScrollEvent'\nimport * as Dom from '../utils/dom'\nimport * as EventManager from '../utils/event-manager'\nimport './author.scss'\n\nconst BASE_LINE = 80\nexport default ({\n                  data: {\n                    site: {\n                      siteMetadata: { title, configs },\n                    },\n                    authorYaml,\n                    allMarkdownRemark: { edges: postNodes },\n                  },\n                  location,\n                }) => {\n  function getDistance(currentPos) {\n    return Dom.getDocumentHeight() - currentPos\n  }\n\n  const { countOfInitialPost } = configs\n  const [count, countRef, increaseCount] = useRenderedCount()\n  useScrollEvent(() => {\n    const currentPos = window.scrollY + window.innerHeight\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE\n    const doesNeedMore = () =>\n      postNodes.length > countRef.current * countOfInitialPost\n\n    return EventManager.toFit(increaseCount, {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })()\n  })\n  return (\n    <Layout location={location}\n            title={title}>\n      <div className='author-profile'>\n        <div className='author-profile__bio'>\n          <Bio author={authorYaml} />\n        </div>\n        <BlogContent\n          showAll={true}\n          posts={postNodes}\n          countOfInitialPost={countOfInitialPost}\n          count={count}\n          category={'All'}\n          postsVisible={true}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n    query PostsByAuthorId($authorId: String!) {\n        site {\n            siteMetadata {\n                title\n                configs {\n                    countOfInitialPost\n                }\n            }\n        }\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { fields: { authorIds: { eq: $authorId } }, frontmatter: {  type: { eq: \"blog\" } } }\n            limit: 5\n        ) {\n            edges {\n                node {\n                    id\n                    frontmatter {\n                        title\n                        category\n                        image {\n                            childImageSharp {\n                                fluid {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                        date\n                        type\n                        tags\n                        authors {\n                            id\n                            name\n                        }\n                    }\n                    fields {\n                        authorIds\n                        slug\n                    }\n                }\n            }\n        }\n        authorYaml(id: { eq: $authorId }) {\n            id\n            name\n            bio\n            profilepicture {\n                childImageSharp {\n                    fluid {\n                        ...GatsbyImageSharpFluid\n                    }\n                }\n            }\n            github\n            linkedin\n            email\n            phone\n        }\n    }\n`\n"],"sourceRoot":""}