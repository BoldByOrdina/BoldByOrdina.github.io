{"version":3,"sources":["webpack:///./src/components/blog-filters/blog-filters.js","webpack:///./src/pages/blog.js"],"names":["BlogFilters","tags","filterTags","React","useState","tagsMenuOpen","setTagsMenu","selectedTag","setSelectedTag","openTagsMenu","changeSelectedTag","tag","window","innerWidth","className","onClick","key","sort","a","b","map","data","location","siteMetadata","site","countOfInitialPost","configs","posts","popularPosts","edges","categories","useMemo","node","frontmatter","category","post","push","temp","Set","recentPosts","useRenderedCount","count","countRef","increaseCount","useCategory","selectCategory","selectedPosts","setSelectedPosts","useIntersectionObserver","useScrollEvent","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","dismissCondition","triggerCondition","length","current","title","HOME_TITLE","keywords","filter","indexOf","showAll","categoriesAsLink","searchIndex","siteSearchIndex","index"],"mappings":"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","file":"component---src-pages-blog-js-ab9aa0b25647625453db.js","sourcesContent":["import React from 'react'\nimport './index.scss'\n\nexport const BlogFilters = ({ tags, filterTags }) => {\n  const [tagsMenuOpen, setTagsMenu] = React.useState(false)\n  const [selectedTag, setSelectedTag] = React.useState('All')\n  const openTagsMenu = () => setTagsMenu(!tagsMenuOpen)\n  const changeSelectedTag = (tag) => {\n    selectedTag === tag ? setSelectedTag('All') : setSelectedTag(tag)\n    window.innerWidth <= 768 && openTagsMenu()\n    filterTags(tag)\n  }\n  return (\n    <div className='blog-filters'>\n      <div className='blog-filters__toggle'\n           onClick={openTagsMenu}>\n        <span className='blog-filters__toggle--filter-name'>Filter:</span>\n        <span className={tagsMenuOpen ? 'blog-filters__toggle--open' : 'blog-filters__toggle--close'} />\n      </div>\n\n\n      <div className={`blog-filters__tags ${tagsMenuOpen ? 'blog-filters__tags--open' : 'blog-filters__tags--close'}`}>\n        <div className='blog-filters__tags--tag clickable'>\n         <span onClick={() => changeSelectedTag('All')}\n               key={'All'}\n               className={selectedTag === 'All' ? 'blog-filters__tags--highlight' : ''}>All</span>\n        </div>\n\n\n        {tags.sort((a, b) => a > b ? 1 : -1).map(tag =>\n          <div className='blog-filters__tags--tag clickable'>\n          <span key={tag}\n                onClick={() => changeSelectedTag(tag)}\n                className={selectedTag === tag ? 'blog-filters__tags--highlight' : ''}>{tag}</span>\n          </div>\n        )}\n\n      </div>\n    </div>\n  )\n}","import { graphql } from 'gatsby'\nimport _ from 'lodash'\nimport React, { useMemo } from 'react'\nimport { Head } from '../components/head'\nimport { HOME_TITLE } from '../constants'\nimport { useCategory } from '../hooks/useCategory'\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver'\nimport { useRenderedCount } from '../hooks/useRenderedCount'\nimport { useScrollEvent } from '../hooks/useScrollEvent'\nimport { Layout } from '../layout'\nimport * as Dom from '../utils/dom'\nimport * as EventManager from '../utils/event-manager'\nimport { BlogContent } from '../components/blog-content'\nimport { BlogFilters } from '../components/blog-filters/blog-filters'\nimport './blog.scss'\n\nconst BASE_LINE = 80\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos\n}\n\nexport default ({ data, location }) => {\n  const { siteMetadata } = data.site\n  const { countOfInitialPost } = siteMetadata.configs\n  const posts = data.popularPosts.edges\n  const categories = useMemo(\n    () => _.uniq(posts.map(({ node }) => node.frontmatter.category)),\n    [],\n  )\n  let tags = []\n  posts.map(post => post.node.frontmatter.tags.map(tag => tags.push(tag)))\n\n  let temp = new Set(tags)\n  tags = [...temp]\n  const recentPosts = data.recentPosts.edges\n  const [count, countRef, increaseCount] = useRenderedCount()\n  const [category, selectCategory] = useCategory()\n  const [selectedPosts, setSelectedPosts] = React.useState([...posts])\n\n  const filterCategories = (category) => {\n    let selectedPosts\n    if (category === 'All') {\n      selectedPosts = [...posts]\n      setSelectedPosts(selectedPosts)\n      return\n    }\n\n    selectedPosts = posts.filter(post => {\n      return post.node.frontmatter.category.indexOf(category) !== -1\n    })\n    setSelectedPosts(selectedPosts)\n  }\n\n  useIntersectionObserver()\n  useScrollEvent(() => {\n    const currentPos = window.scrollY + window.innerHeight\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE\n    const doesNeedMore = () =>\n      posts.length > countRef.current * countOfInitialPost\n\n    return EventManager.toFit(increaseCount, {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })()\n  })\n  return (\n    <Layout location={location}\n            title={siteMetadata.title}>\n      <Head title={HOME_TITLE}\n            keywords={siteMetadata.keywords} />\n      <div className='blog-page'>\n        <div className='blog-page__intro'>\n          <h1 className='blog-page__intro--title'>BOLD <strong>BLOG</strong>\n          </h1>\n          <p>Catch up on the latest design and technology insights with our collection of articles and case studies\n          </p>\n        </div>\n\n        <BlogFilters tags={categories}\n                     filterTags={filterCategories} />\n        <BlogContent\n          showAll={true}\n          categoriesAsLink\n          posts={selectedPosts}\n          recentPosts={recentPosts}\n          countOfInitialPost={countOfInitialPost}\n          count={count}\n          categories={categories}\n          selectCategory={selectCategory}\n          category={category}\n          searchIndex={data.siteSearchIndex.index}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n    query {\n        siteSearchIndex {\n            index\n        }\n        site {\n            siteMetadata {\n                title\n                configs {\n                    countOfInitialPost\n                }\n            }\n        }\n        popularPosts: allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { category: { ne: null }, draft: { eq: false }, type: { eq: \"blog\" } } }\n        ) {\n            edges {\n                node {\n                    excerpt(pruneLength: 200, truncate: true)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        type\n                        image {\n                            childImageSharp {\n                                fluid {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                        authors {\n                            name\n                            id\n                        }\n                        category\n                        draft\n                    }\n                }\n            }\n        }\n        recentPosts: allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            limit: 3\n            filter: { frontmatter: {  type: { eq: \"blog\" } } }\n        ) {\n            edges {\n                node {\n                    id\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        type\n                        image {\n                            childImageSharp {\n                                fluid {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        featuredAuthorPosts: allMarkdownRemark(\n            filter: {\n                frontmatter: { type: { eq: \"blog\" }, authors: { elemMatch: { featured: { eq: true } } } }\n            }\n        ) {\n            edges {\n                node {\n                    id\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        type\n                        image {\n                            childImageSharp {\n                                fluid {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                        tags\n                        authors {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}