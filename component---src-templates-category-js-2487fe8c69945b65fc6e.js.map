{"version":3,"sources":["webpack:///./src/components/post-preview-cards/index.js","webpack:///./src/components/thumbnail-item-custom/index.jsx","webpack:///./src/templates/category.js","webpack:///./src/hooks/useIntersectionObserver.js","webpack:///./src/components/breadcrumb/index.jsx"],"names":["PostPreviewCards","posts","notFeatured","length","className","map","node","id","frontmatter","title","date","authors","image","key","to","alt","fluid","childImageSharp","Date","toDateString","a","name","join","ThumbnailItemCustom","large","TARGET_CLASS","fields","slug","dangerouslySetInnerHTML","__html","excerpt","author","firstRow","pageContext","data","location","category","allMarkdownRemark","edges","secondRow","otherRows","forEach","index","push","site","siteMetadata","useIntersectionObserver","style","background","links","href","pathname","paddingTop","display","gridTemplateColumns","gap","useEffect","IOManager","PostPath","link","replace"],"mappings":"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","file":"component---src-templates-category-js-2487fe8c69945b65fc6e.js","sourcesContent":["import React from 'react'\nimport './index.scss'\nimport Image from 'gatsby-image'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nexport const PostPreviewCards = ({ posts, notFeatured }) => {\n  return posts.length > 0 ? \n  (\n    <div className=\"post-preview-cards\">\n      <ul>\n        {posts.map(\n          ({\n            node: {\n              id,\n              frontmatter: { title, date, authors, image },\n            },\n          }) => {\n            return (\n              <Link key={id} to={`/blog/${_.kebabCase(title)}/`}>\n                <li className=\"post-preview-card__item\">\n                  <Image\n                    className=\"post-preview-card__image\"\n                    alt={title}\n                    fluid={image.childImageSharp.fluid}\n                  />\n                  <div className=\"post-preview-card__content\">\n                    <span>{new Date(date).toDateString()}</span>\n                    <p>{title}</p>\n                    <span className=\"author-span\">{ authors.length > 0 ? ( `by ` ) : null } {authors.map(a => a.name).join(', ')}</span>\n                  </div>\n                </li>\n              </Link>\n            )\n          }\n        )}\n      </ul>\n    </div>\n  ) : (notFeatured ? null :\n  (\n    <div>\n      This author has no posts yet!\n    </div>\n  ))\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\nimport { TARGET_CLASS } from '../../utils/visible'\n\nimport './index.scss'\nimport Image from 'gatsby-image'\n\nexport const ThumbnailItemCustom = ({ node, large = false }) => (\n  <div\n    className={`thumbnail-custom ${TARGET_CLASS} ${\n      large ? 'thumbnail-custom--large' : ''\n    }`}\n  >\n    <div key={node.fields.slug} className=\"thumbnail-grid\">\n      <Link to={`/blog/${_.kebabCase(node.frontmatter.title)}/`}>\n        <Image\n          className=\"post-thumbnail-image\"\n          fluid={node.frontmatter.image.childImageSharp.fluid}\n          alt={node.frontmatter.title}\n        />\n      </Link>\n      <div className=\"post-thumbnail-description\">\n        <Link to={`/blog/${_.kebabCase(node.frontmatter.title)}/`}>\n          <small>{node.frontmatter.date}</small>\n          <h3>{node.frontmatter.title || node.fields.slug}</h3>\n          <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n        </Link>\n        <small>\n          { node.frontmatter.authors.length > 0 ? ( `by ` ) : null }\n          {!!node.frontmatter.authors &&\n            node.frontmatter.authors.map(author => (\n              <Link\n                to={'/author/' + author.id}\n                key={author.id}\n                className=\"author\"\n              >\n                {author.name}\n              </Link>\n            ))}\n        </small>\n      </div>\n    </div>\n  </div>\n)\n","import React from 'react'\nimport { Layout } from '../layout'\nimport { graphql } from 'gatsby'\nimport { PostPath } from '../components/breadcrumb'\nimport { PostPreviewCards } from '../components/post-preview-cards'\nimport { ThumbnailItemCustom } from '../components/thumbnail-item-custom'\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver'\n\nexport default ({ pageContext, data, location }) => {\n  const { category } = pageContext\n  const { edges = [] } = data.allMarkdownRemark\n  // const sortedPosts = edges.reduce(\n  //   (acc, node, index) => {\n  //     if (index === 0) {\n  //       return { ...acc, firstRow: node }\n  //     }\n\n  //     if (index > 0 && index < 4) {\n  //       return {\n  //         ...acc,\n  //         secondRow: [...acc.secondRow, node, node, node],\n  //         otherRows: [...acc.otherRows, node, node, node, node, node, node],\n  //       }\n  //     }\n\n  //     return { ...acc, otherRows: [...acc.otherRows, node] }\n  //   },\n  //   { firstRow: null, secondRow: [], otherRows: [] }\n  // )\n  let firstRow;\n  const secondRow = [];\n  const otherRows = [];\n  edges.forEach((node, index) => {\n    if (index === 0) {\n      firstRow = node;\n    } else if (index > 0 && index < 4) {\n      secondRow.push(node);\n    } else {\n      otherRows.push(node);\n    }\n  })\n  const { title } = data.site.siteMetadata\n\n  useIntersectionObserver()\n\n  return (\n    <Layout title={title} location={'/blog/' + category}>\n      <div style={{ background: '#e5e5e5' }}>\n        <div className=\"container\">\n          <PostPath\n            links={[\n              {\n                href: '/blog',\n                title: 'Blog',\n              },\n              {\n                href: location.pathname,\n                title: category,\n              },\n            ]}\n          />\n          <h2>{category}</h2>\n          <div style={{ paddingTop: '2rem' }}>\n            <ThumbnailItemCustom large node={firstRow.node} />\n          </div>\n          <div\n            style={{\n              paddingTop: '4rem',\n              display: 'grid',\n              gridTemplateColumns: '1fr 1fr 1fr',\n              gap: '4rem',\n            }}\n          >\n            {secondRow.map(({ node }) => (\n              <ThumbnailItemCustom key={node.id} node={node} />\n            ))}\n          </div>\n          <div style={{ paddingTop: '4rem' }}>\n            <PostPreviewCards posts={otherRows} notFeatured />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___category], order: DESC }\n      filter: { frontmatter: { category: { in: [$category] }, type: { eq: \"blog\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            image {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            authors {\n              name\n              id\n            }\n            draft\n          }\n        }\n      }\n    }\n  }\n`\n","import { useEffect } from 'react'\nimport * as IOManager from '../utils/visible'\n\nexport function useIntersectionObserver() {\n  useEffect(() => {\n    IOManager.init()\n  }, [])\n\n  useEffect(() => {\n    IOManager.refreshObserver()\n  })\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport './index.scss'\n\nexport const PostPath = ({ links = [] }) => {\n  return (\n    <div className='breadcrumb'>\n      {links.map((link, index) => (\n        <span\n          key={index}\n          className={\n            index === links.length - 1\n              ? 'breadcrumb-item breadcrumb-item--last'\n              : 'breadcrumb-item'\n          }\n        >\n          <Link to={link.href}\n                replace\n                className={index === 0 ? 'breadcrumb-item-first' : ''}>{link.title}</Link>\n          {links.length !== index + 1 ? <span className='arrow-icon' /> : null}\n        </span>\n      ))}\n    </div>\n  )\n}\n"],"sourceRoot":""}