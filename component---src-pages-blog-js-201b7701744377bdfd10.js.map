{"version":3,"file":"component---src-pages-blog-js-201b7701744377bdfd10.js","mappings":"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","sources":["webpack://ordina-blog/./src/components/blog-filters/blog-filters.js","webpack://ordina-blog/./src/pages/blog.js"],"sourcesContent":["import React from 'react'\nimport './index.scss'\n\nexport const BlogFilters = ({ tags, filterTags }) => {\n  const [tagsMenuOpen, setTagsMenu] = React.useState(false)\n  const [selectedTag, setSelectedTag] = React.useState('All')\n  const openTagsMenu = () => setTagsMenu(!tagsMenuOpen)\n  const changeSelectedTag = (tag) => {\n    selectedTag === tag ? setSelectedTag('All') : setSelectedTag(tag)\n    window.innerWidth <= 768 && openTagsMenu()\n    filterTags(tag)\n  }\n  return (\n    <div className='blog-filters'>\n      <div className='blog-filters__toggle'\n           onClick={openTagsMenu}>\n        <span className='blog-filters__toggle--filter-name'>Filter:</span>\n        <span className={tagsMenuOpen ? 'blog-filters__toggle--open' : 'blog-filters__toggle--close'} />\n      </div>\n\n\n      <div className={`blog-filters__tags ${tagsMenuOpen ? 'blog-filters__tags--open' : 'blog-filters__tags--close'}`}>\n        <div className='blog-filters__tags--tag clickable'>\n         <span onClick={() => changeSelectedTag('All')}\n               key={'All'}\n               className={selectedTag === 'All' ? 'blog-filters__tags--highlight' : ''}>All</span>\n        </div>\n\n\n        {tags.sort((a, b) => a > b ? 1 : -1).map(tag =>\n          <div className='blog-filters__tags--tag clickable'>\n          <span key={tag}\n                onClick={() => changeSelectedTag(tag)}\n                className={selectedTag === tag ? 'blog-filters__tags--highlight' : ''}>{tag}</span>\n          </div>\n        )}\n\n      </div>\n    </div>\n  )\n}","import { graphql } from 'gatsby'\nimport _ from 'lodash'\nimport React, { useMemo } from 'react'\nimport { Head } from '../components/head'\nimport { HOME_TITLE } from '../constants'\nimport { useCategory } from '../hooks/useCategory'\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver'\nimport { useRenderedCount } from '../hooks/useRenderedCount'\nimport { useScrollEvent } from '../hooks/useScrollEvent'\nimport { Layout } from '../layout'\nimport * as Dom from '../utils/dom'\nimport * as EventManager from '../utils/event-manager'\nimport { BlogContent } from '../components/blog-content'\nimport { BlogFilters } from '../components/blog-filters/blog-filters'\nimport './blog.scss'\n\nconst BASE_LINE = 80\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos\n}\n\nconst Blog = ({ data, location }) => {\n  const { siteMetadata } = data.site\n  const { countOfInitialPost } = siteMetadata.configs\n  const posts = data.popularPosts.edges\n  const categories = useMemo(\n    () => _.uniq(posts.map(({ node }) => node.frontmatter.category)),\n    []\n  )\n  let tags = []\n  posts.map(post => post.node.frontmatter.tags.map(tag => tags.push(tag)))\n\n  let temp = new Set(tags)\n  tags = [...temp]\n  const [count, countRef, increaseCount] = useRenderedCount()\n  const [category, selectCategory] = useCategory()\n  const [selectedPosts, setSelectedPosts] = React.useState([...posts])\n\n  const filterCategories = category => {\n    let selectedPosts\n    if (category === 'All') {\n      selectedPosts = [...posts]\n      setSelectedPosts(selectedPosts)\n      return\n    }\n\n    selectedPosts = posts.filter(post => {\n      return post.node.frontmatter.category.indexOf(category) !== -1\n    })\n    setSelectedPosts(selectedPosts)\n  }\n\n  useIntersectionObserver()\n  useScrollEvent(() => {\n    const currentPos = window.scrollY + window.innerHeight\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE\n    const doesNeedMore = () =>\n      posts.length > countRef.current * countOfInitialPost\n\n    return EventManager.toFit(increaseCount, {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })()\n  })\n  return (\n    <Layout location={location} title={siteMetadata.title}>\n      <Head title={HOME_TITLE} keywords={siteMetadata.keywords} />\n      <div className=\"blog-page\">\n        <div className=\"blog-page__intro\">\n          <h1 className=\"blog-page__intro--title\">\n            BOLD <strong>BLOG</strong>\n          </h1>\n          <p>\n            Catch up on the latest design and technology insights with our\n            collection of articles and case studies\n          </p>\n        </div>\n\n        <BlogFilters tags={categories} filterTags={filterCategories} />\n        <BlogContent\n          showAll={true}\n          categoriesAsLink\n          posts={selectedPosts}\n          countOfInitialPost={countOfInitialPost}\n          count={count}\n          categories={categories}\n          selectCategory={selectCategory}\n          category={category}\n          searchIndex={data.siteSearchIndex.index}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default Blog;\n\nexport const pageQuery = graphql`\n  query {\n    siteSearchIndex {\n      index\n    }\n    site {\n      siteMetadata {\n        title\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    popularPosts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          category: { ne: null }\n          draft: { eq: false }\n          type: { eq: \"blog\" }\n        }\n      }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            type\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED)\n              }\n            }\n            authors {\n              name\n              id\n            }\n            category\n            draft\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["BlogFilters","tags","filterTags","React","tagsMenuOpen","setTagsMenu","selectedTag","setSelectedTag","openTagsMenu","changeSelectedTag","tag","window","innerWidth","className","onClick","key","sort","a","b","map","data","location","siteMetadata","site","countOfInitialPost","configs","posts","popularPosts","edges","categories","useMemo","node","frontmatter","category","post","push","temp","Set","useRenderedCount","count","countRef","increaseCount","useCategory","selectCategory","selectedPosts","setSelectedPosts","useIntersectionObserver","useScrollEvent","currentPos","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","dismissCondition","triggerCondition","length","current","title","HOME_TITLE","keywords","filter","indexOf","showAll","categoriesAsLink","searchIndex","siteSearchIndex","index"],"sourceRoot":""}